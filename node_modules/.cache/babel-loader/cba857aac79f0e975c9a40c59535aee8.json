{"ast":null,"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\nvar objectWithoutProperties = function (obj, keys) {\n  var target = {};\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n  return target;\n};\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\nvar Only = function (_Component) {\n  inherits(Only, _Component);\n  function Only() {\n    classCallCheck(this, Only);\n    return possibleConstructorReturn(this, (Only.__proto__ || Object.getPrototypeOf(Only)).apply(this, arguments));\n  }\n  createClass(Only, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n        children = _props.children,\n        when = _props.when,\n        hiddenMode = _props.hiddenMode,\n        className = _props.className;\n      var singleChild = React.Children.only(children);\n      var _singleChild$props = singleChild.props,\n        style = _singleChild$props.style,\n        restOfChildProps = objectWithoutProperties(_singleChild$props, ['style']);\n      var extendedProps = _extends({}, restOfChildProps);\n      var keepNode = hiddenMode && hiddenMode !== \"withNull\";\n      if (keepNode) {\n        if (hiddenMode === \"withCss\") {\n          extendedProps.className = extendedProps.className + ' ' + className;\n        } else {\n          extendedProps.style = _extends({}, style, hiddenMode === \"withDisplay\" && {\n            display: \"none\"\n          }, hiddenMode === \"withVisibility\" && {\n            visibility: \"hidden\"\n          });\n        }\n      }\n      var cloned = React.cloneElement(singleChild, extendedProps);\n      var toHide = keepNode ? cloned : null;\n      return when ? singleChild : toHide;\n    }\n  }]);\n  return Only;\n}(Component);\nOnly.defaultProps = {\n  hiddenMode: \"withNull\",\n  className: \"r-o_hidden\"\n};\nOnly.propTypes = {\n  /** A single child element */\n  children: PropTypes.element.isRequired,\n  /** When true, children will rendered as is  */\n  when: PropTypes.bool.isRequired,\n  /** Determines how \"react-only-when\" should hide the child element \n   * \"withNull\": Will not render the child\n   * \"withDisplay\": Will render the child with display:none  \n   * \"withVisibility\": Will render the child with visibility:hidden\n   * \"withCss\": Will render the child with a CSS class (you can pass it a custom className prop)\n  */\n  hiddenMode: PropTypes.oneOf([\"withNull\", \"withDisplay\", \"withVisibility\", \"withCss\"]),\n  /** This is working in combination with hiddenMode={\"withCss\"}   */\n  className: PropTypes.string\n};\nexport default Only;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGMA;;;;;;;;6BA8BK;mBAC2C,KAAKC,KADhD;QACCC,QADD,UACCA,QADD;QACWC,IADX,UACWA,IADX;QACiBC,UADjB,UACiBA,UADjB;QAC6BC,SAD7B,UAC6BA,SAD7B;UAEDC,cAAcC,MAAMC,QAAN,CAAeC,IAAf,CAAoBP,QAApB,CAApB;+BACuCI,YAAYL,KAH5C;QAGCS,KAHD,sBAGCA,KAHD;QAGWC,gBAHX;UAIDC,6BAAqBD,gBAArB,CAAN;UAEME,WAAWT,cAAcA,eAAe,UAA9C;UAEIS,QAAJ,EAAc;YACRT,eAAe,SAAnB,EAA8B;wBACdC,SAAd,GAA6BO,cAAcP,SAA3C,SAAwDA,SAAxD;SADF,MAEO;wBACSK,KAAd,gBACKA,KADL,EAEMN,eAAe,aAAf,IAAgC;YAAEU,SAAS;UAAX,CAFtC,EAGMV,eAAe,gBAAf,IAAmC;YAAEW,YAAY;UAAd,CAHzC;;;UAOEC,SAAST,MAAMU,YAAN,CAAmBX,WAAnB,EAAgCM,aAAhC,CAAf;UACMM,SAASL,WAAWG,MAAX,GAAoB,IAAnC;aAEOb,OAAOG,WAAP,GAAqBY,MAA5B;;;;EApDeC;AAAbnB,KAEGoB,eAAe;cACR,UADQ;aAET;;AAJTpB,KAOGqB,YAAY;;YAEPC,UAAUC,OAAV,CAAkBC,UAFX;;QAKXF,UAAUG,IAAV,CAAeD,UALJ;;;;;;;cAaLF,UAAUI,KAAV,CAAgB,CAC1B,UAD0B,EAE1B,aAF0B,EAG1B,gBAH0B,EAI1B,SAJ0B,CAAhB,CAbK;;aAoBNJ,UAAUK","names":["Only","props","children","when","hiddenMode","className","singleChild","React","Children","only","style","restOfChildProps","extendedProps","keepNode","display","visibility","cloned","cloneElement","toHide","Component","defaultProps","propTypes","PropTypes","element","isRequired","bool","oneOf","string"],"sources":["../src/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Only extends Component {\n\n  static defaultProps = {\n    hiddenMode: \"withNull\",\n    className: \"r-o_hidden\"\n  }\n\n  static propTypes = {\n    /** A single child element */\n    children: PropTypes.element.isRequired,\n\n    /** When true, children will rendered as is  */\n    when: PropTypes.bool.isRequired,\n\n    /** Determines how \"react-only-when\" should hide the child element \n     * \"withNull\": Will not render the child\n     * \"withDisplay\": Will render the child with display:none  \n     * \"withVisibility\": Will render the child with visibility:hidden\n     * \"withCss\": Will render the child with a CSS class (you can pass it a custom className prop)\n    */\n    hiddenMode: PropTypes.oneOf([\n      \"withNull\",\n      \"withDisplay\",\n      \"withVisibility\",\n      \"withCss\"\n    ]),\n    /** This is working in combination with hiddenMode={\"withCss\"}   */\n    className: PropTypes.string\n  }\n\n  render() {\n    const { children, when, hiddenMode, className } = this.props;\n    const singleChild = React.Children.only(children);\n    const { style, ...restOfChildProps } = singleChild.props;\n    const extendedProps = { ...restOfChildProps };\n\n    const keepNode = hiddenMode && hiddenMode !== \"withNull\";\n\n    if (keepNode) {\n      if (hiddenMode === \"withCss\") {\n        extendedProps.className = `${extendedProps.className} ${className}`;\n      } else {\n        extendedProps.style = {\n          ...style,\n          ...(hiddenMode === \"withDisplay\" && { display: \"none\" }),\n          ...(hiddenMode === \"withVisibility\" && { visibility: \"hidden\" })\n        };\n      }\n    }\n    const cloned = React.cloneElement(singleChild, extendedProps);\n    const toHide = keepNode ? cloned : null;\n\n    return when ? singleChild : toHide;\n  }\n}\n\nexport default Only;\n"]},"metadata":{},"sourceType":"module"}